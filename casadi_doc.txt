OPTI PLUGIN OPTIONS

> "print_time"          [OT_BOOL]      "print information about execution time. Implies record_time."
> "record_time"          [OT_BOOL]      "record information about execution time, for retrieval with stats()."
> "verbose"          [OT_BOOL]      "Verbose evaluation -- for debugging"
> "ad_weight"          [OT_DOUBLE]      "Weighting factor for derivative calculation.When there is an option of either using forward or reverse mode directional derivatives, the condition ad_weight*nf<=(1-ad_weight)*na is used where nf and na are estimates of the number of forward/reverse mode directional derivatives needed. By default, ad_weight is calculated automatically, but this can be overridden by setting this option. In particular, 0 means forcing forward mode and 1 forcing reverse mode. Leave unset for (class specific) heuristics."
> "ad_weight_sp"          [OT_DOUBLE]      "Weighting factor for sparsity pattern calculation calculation.Overrides default behavior. Set to 0 and 1 to force forward and reverse mode respectively. Cf. option "ad_weight". When set to -1, sparsity is completely ignored and dense matrices are used."
> "always_inline"          [OT_BOOL]      "Force inlining."
> "compiler"          [OT_STRING]      "Just-in-time compiler plugin to be used."
> "custom_jacobian"          [OT_FUNCTION]      "Override CasADi's AD. Use together with 'jac_penalty': 0. Note: Highly experimental. Syntax may break often."
> "derivative_of"          [OT_FUNCTION]      "The function is a derivative of another function. The type of derivative (directional derivative, Jacobian) is inferred from the function name."
> "dump"          [OT_BOOL]      "Dump function to file upon first evaluation. [false]"
> "dump_dir"          [OT_STRING]      "Directory to dump inputs/outputs to. Make sure the directory exists [.]"
> "dump_format"          [OT_STRING]      "Choose file format to dump matrices. See DM.from_file [mtx]"
> "dump_in"          [OT_BOOL]      "Dump numerical values of inputs to file (readable with DM.from_file) [default: false]"
> "dump_out"          [OT_BOOL]      "Dump numerical values of outputs to file (readable with DM.from_file) [default: false]"
> "enable_fd"          [OT_BOOL]      "Enable derivative calculation by finite differencing. [default: false]]"
> "enable_forward"          [OT_BOOL]      "Enable derivative calculation using generated functions for Jacobian-times-vector products - typically using forward mode AD - if available. [default: true]"
> "enable_jacobian"          [OT_BOOL]      "Enable derivative calculation using generated functions for Jacobians of all differentiable outputs with respect to all differentiable inputs - if available. [default: true]"
> "enable_reverse"          [OT_BOOL]      "Enable derivative calculation using generated functions for transposed Jacobian-times-vector products - typically using reverse mode AD - if available. [default: true]"
> "fd_method"          [OT_STRING]      "Method for finite differencing [default 'central']"
> "fd_options"          [OT_DICT]      "Options to be passed to the finite difference instance"
> "forward_options"          [OT_DICT]      "Options to be passed to a forward mode constructor"
> "gather_stats"          [OT_BOOL]      "Deprecated option (ignored): Statistics are now always collected."
> "input_scheme"          [OT_STRINGVECTOR]      "Deprecated option (ignored)"
> "inputs_check"          [OT_BOOL]      "Throw exceptions when the numerical values of the inputs don't make sense"
> "is_diff_in"          [OT_BOOLVECTOR]      "Indicate for each input if it should be differentiable."
> "is_diff_out"          [OT_BOOLVECTOR]      "Indicate for each output if it should be differentiable."
> "jac_penalty"          [OT_DOUBLE]      "When requested for a number of forward/reverse directions,   it may be cheaper to compute first the full jacobian and then multiply with seeds, rather than obtain the requested directions in a straightforward manner. Casadi uses a heuristic to decide which is cheaper. A high value of 'jac_penalty' makes it less likely for the heurstic to chose the full Jacobian strategy. The special value -1 indicates never to use the full Jacobian strategy"
> "jit"          [OT_BOOL]      "Use just-in-time compiler to speed up the evaluation"
> "jit_cleanup"          [OT_BOOL]      "Cleanup up the temporary source file that jit creates. Default: true"
> "jit_name"          [OT_STRING]      "The file name used to write out code. The actual file names used depend on 'jit_temp_suffix' and include extensions. Default: 'jit_tmp'"
> "jit_options"          [OT_DICT]      "Options to be passed to the jit compiler."
> "jit_serialize"          [OT_STRING]      "Specify behaviour when serializing a jitted function: SOURCE|link|embed."
> "jit_temp_suffix"          [OT_BOOL]      "Use a temporary (seemingly random) filename suffix for generated code and libraries. This is desired for thread-safety. This behaviour may defeat caching compiler wrappers. Default: true"
> "max_num_dir"          [OT_INT]      "Specify the maximum number of directions for derivative functions. Overrules the builtin optimized_num_dir."
> "never_inline"          [OT_BOOL]      "Forbid inlining."
> "output_scheme"          [OT_STRINGVECTOR]      "Deprecated option (ignored)"
> "print_in"          [OT_BOOL]      "Print numerical values of inputs [default: false]"
> "print_out"          [OT_BOOL]      "Print numerical values of outputs [default: false]"
> "regularity_check"          [OT_BOOL]      "Throw exceptions when NaN or Inf appears during evaluation"
> "reverse_options"          [OT_DICT]      "Options to be passed to a reverse mode constructor"
> "user_data"          [OT_VOIDPTR]      "A user-defined field that can be used to identify the function or pass additional information"
> "common_options"          [OT_DICT]      "Options for auto-generated functions"
> "expand"          [OT_BOOL]      "Replace MX with SX expressions in problem formulation [false]"
> "monitor"          [OT_STRINGVECTOR]      "Set of user problem functions to be monitored"
> "show_eval_warnings"          [OT_BOOL]      "Show warnings generated from function evaluations [true]"
> "specific_options"          [OT_DICT]      "Options for specific auto-generated functions, overwriting the defaults from common_options. Nested dictionary."
> "bound_consistency"          [OT_BOOL]      "Ensure that primal-dual solution is consistent with the bounds"
> "calc_f"          [OT_BOOL]      "Calculate 'f' in the Nlpsol base class"
> "calc_g"          [OT_BOOL]      "Calculate 'g' in the Nlpsol base class"
> "calc_lam_p"          [OT_BOOL]      "Calculate 'lam_p' in the Nlpsol base class"
> "calc_lam_x"          [OT_BOOL]      "Calculate 'lam_x' in the Nlpsol base class"
> "calc_multipliers"          [OT_BOOL]      "Calculate Lagrange multipliers in the Nlpsol base class"
> "discrete"          [OT_BOOLVECTOR]      "Indicates which of the variables are discrete, i.e. integer-valued"
> "error_on_fail"          [OT_BOOL]      "When the numerical process returns unsuccessfully, raise an error (default false)."
> "eval_errors_fatal"          [OT_BOOL]      "When errors occur during evaluation of f,g,...,stop the iterations"
> "ignore_check_vec"          [OT_BOOL]      "If set to true, the input shape of F will not be checked."
> "iteration_callback"          [OT_FUNCTION]      "A function that will be called at each iteration with the solver as input. Check documentation of Callback."
> "iteration_callback_ignore_errors"          [OT_BOOL]      "If set to true, errors thrown by iteration_callback will be ignored."
> "iteration_callback_step"          [OT_INT]      "Only call the callback function every few iterations."
> "min_lam"          [OT_DOUBLE]      "Minimum allowed multiplier value"
> "no_nlp_grad"          [OT_BOOL]      "Prevent the creation of the 'nlp_grad' function"
> "oracle_options"          [OT_DICT]      "Options to be passed to the oracle function"
> "sens_linsol"          [OT_STRING]      "Linear solver used for parametric sensitivities (default 'qr')."
> "sens_linsol_options"          [OT_DICT]      "Linear solver options used for parametric sensitivities."
> "verbose_init"          [OT_BOOL]      "Print out timing information about the different stages of initialization"
> "warn_initial_bounds"          [OT_BOOL]      "Warn if the initial guess does not satisfy LBX and UBX"
> "clip_inactive_lam"          [OT_BOOL]      "Explicitly set Lagrange multipliers to 0 when bound is deemed inactive (default: false)."
> "con_integer_md"          [OT_DICT]      "Integer metadata (a dictionary with lists of integers) about constraints to be passed to IPOPT"
> "con_numeric_md"          [OT_DICT]      "Numeric metadata (a dictionary with lists of reals) about constraints to be passed to IPOPT"
> "con_string_md"          [OT_DICT]      "String metadata (a dictionary with lists of strings) about constraints to be passed to IPOPT"
> "convexify_margin"          [OT_DOUBLE]      "When using a convexification strategy, make sure that the smallest eigenvalue is at least this (default: 1e-7)."
> "convexify_strategy"          [OT_STRING]      "NONE|regularize|eigen-reflect|eigen-clip. Strategy to convexify the Lagrange Hessian before passing it to the solver."
> "grad_f"          [OT_FUNCTION]      "Function for calculating the gradient of the objective (column, autogenerated by default)"
> "hess_lag"          [OT_FUNCTION]      "Function for calculating the Hessian of the Lagrangian (autogenerated by default)"
> "inactive_lam_strategy"          [OT_STRING]      "Strategy to detect if a bound is inactive. RELTOL: use solver-defined constraint tolerance * inactive_lam_value|abstol: use inactive_lam_value"
> "inactive_lam_value"          [OT_DOUBLE]      "Value used in inactive_lam_strategy (default: 10)."
> "ipopt"          [OT_DICT]      "Options to be passed to IPOPT"
> "jac_g"          [OT_FUNCTION]      "Function for calculating the Jacobian of the constraints (autogenerated by default)"
> "max_iter_eig"          [OT_DOUBLE]      "Maximum number of iterations to compute an eigenvalue decomposition (default: 50)."
> "pass_nonlinear_variables"          [OT_BOOL]      "Pass list of variables entering nonlinearly to IPOPT"
> "var_integer_md"          [OT_DICT]      "Integer metadata (a dictionary with lists of integers) about variables to be passed to IPOPT"
> "var_numeric_md"          [OT_DICT]      "Numeric metadata (a dictionary with lists of reals) about variables to be passed to IPOPT"
> "var_string_md"          [OT_DICT]      "String metadata (a dictionary with lists of strings) about variables to be passed to IPOPT"




SQPMETHOD
> "print_time"          [OT_BOOL]      "print information about execution time. Implies record_time."
> "record_time"          [OT_BOOL]      "record information about execution time, for retrieval with stats()."
> "verbose"          [OT_BOOL]      "Verbose evaluation -- for debugging"
> "ad_weight"          [OT_DOUBLE]      "Weighting factor for derivative calculation.When there is an option of either using forward or reverse mode directional derivatives, the condition ad_weight*nf<=(1-ad_weight)*na is used where nf and na are estimates of the number of forward/reverse mode directional derivatives needed. By default, ad_weight is calculated automatically, but this can be overridden by setting this option. In particular, 0 means forcing forward mode and 1 forcing reverse mode. Leave unset for (class specific) heuristics."
> "ad_weight_sp"          [OT_DOUBLE]      "Weighting factor for sparsity pattern calculation calculation.Overrides default behavior. Set to 0 and 1 to force forward and reverse mode respectively. Cf. option "ad_weight". When set to -1, sparsity is completely ignored and dense matrices are used."
> "always_inline"          [OT_BOOL]      "Force inlining."
> "compiler"          [OT_STRING]      "Just-in-time compiler plugin to be used."
> "custom_jacobian"          [OT_FUNCTION]      "Override CasADi's AD. Use together with 'jac_penalty': 0. Note: Highly experimental. Syntax may break often."
> "derivative_of"          [OT_FUNCTION]      "The function is a derivative of another function. The type of derivative (directional derivative, Jacobian) is inferred from the function name."
> "dump"          [OT_BOOL]      "Dump function to file upon first evaluation. [false]"
> "dump_dir"          [OT_STRING]      "Directory to dump inputs/outputs to. Make sure the directory exists [.]"
> "dump_format"          [OT_STRING]      "Choose file format to dump matrices. See DM.from_file [mtx]"
> "dump_in"          [OT_BOOL]      "Dump numerical values of inputs to file (readable with DM.from_file) [default: false]"
> "dump_out"          [OT_BOOL]      "Dump numerical values of outputs to file (readable with DM.from_file) [default: false]"
> "enable_fd"          [OT_BOOL]      "Enable derivative calculation by finite differencing. [default: false]]"
> "enable_forward"          [OT_BOOL]      "Enable derivative calculation using generated functions for Jacobian-times-vector products - typically using forward mode AD - if available. [default: true]"
> "enable_jacobian"          [OT_BOOL]      "Enable derivative calculation using generated functions for Jacobians of all differentiable outputs with respect to all differentiable inputs - if available. [default: true]"
> "enable_reverse"          [OT_BOOL]      "Enable derivative calculation using generated functions for transposed Jacobian-times-vector products - typically using reverse mode AD - if available. [default: true]"
> "fd_method"          [OT_STRING]      "Method for finite differencing [default 'central']"
> "fd_options"          [OT_DICT]      "Options to be passed to the finite difference instance"
> "forward_options"          [OT_DICT]      "Options to be passed to a forward mode constructor"
> "gather_stats"          [OT_BOOL]      "Deprecated option (ignored): Statistics are now always collected."
> "input_scheme"          [OT_STRINGVECTOR]      "Deprecated option (ignored)"
> "inputs_check"          [OT_BOOL]      "Throw exceptions when the numerical values of the inputs don't make sense"
> "is_diff_in"          [OT_BOOLVECTOR]      "Indicate for each input if it should be differentiable."
> "is_diff_out"          [OT_BOOLVECTOR]      "Indicate for each output if it should be differentiable."
> "jac_penalty"          [OT_DOUBLE]      "When requested for a number of forward/reverse directions,   it may be cheaper to compute first the full jacobian and then multiply with seeds, rather than obtain the requested directions in a straightforward manner. Casadi uses a heuristic to decide which is cheaper. A high value of 'jac_penalty' makes it less likely for the heurstic to chose the full Jacobian strategy. The special value -1 indicates never to use the full Jacobian strategy"
> "jit"          [OT_BOOL]      "Use just-in-time compiler to speed up the evaluation"
> "jit_cleanup"          [OT_BOOL]      "Cleanup up the temporary source file that jit creates. Default: true"
> "jit_name"          [OT_STRING]      "The file name used to write out code. The actual file names used depend on 'jit_temp_suffix' and include extensions. Default: 'jit_tmp'"
> "jit_options"          [OT_DICT]      "Options to be passed to the jit compiler."
> "jit_serialize"          [OT_STRING]      "Specify behaviour when serializing a jitted function: SOURCE|link|embed."
> "jit_temp_suffix"          [OT_BOOL]      "Use a temporary (seemingly random) filename suffix for generated code and libraries. This is desired for thread-safety. This behaviour may defeat caching compiler wrappers. Default: true"
> "max_num_dir"          [OT_INT]      "Specify the maximum number of directions for derivative functions. Overrules the builtin optimized_num_dir."
> "never_inline"          [OT_BOOL]      "Forbid inlining."
> "output_scheme"          [OT_STRINGVECTOR]      "Deprecated option (ignored)"
> "print_in"          [OT_BOOL]      "Print numerical values of inputs [default: false]"
> "print_out"          [OT_BOOL]      "Print numerical values of outputs [default: false]"
> "regularity_check"          [OT_BOOL]      "Throw exceptions when NaN or Inf appears during evaluation"
> "reverse_options"          [OT_DICT]      "Options to be passed to a reverse mode constructor"
> "user_data"          [OT_VOIDPTR]      "A user-defined field that can be used to identify the function or pass additional information"
> "common_options"          [OT_DICT]      "Options for auto-generated functions"
> "expand"          [OT_BOOL]      "Replace MX with SX expressions in problem formulation [false]"
> "monitor"          [OT_STRINGVECTOR]      "Set of user problem functions to be monitored"
> "show_eval_warnings"          [OT_BOOL]      "Show warnings generated from function evaluations [true]"
> "specific_options"          [OT_DICT]      "Options for specific auto-generated functions, overwriting the defaults from common_options. Nested dictionary."
> "bound_consistency"          [OT_BOOL]      "Ensure that primal-dual solution is consistent with the bounds"
> "calc_f"          [OT_BOOL]      "Calculate 'f' in the Nlpsol base class"
> "calc_g"          [OT_BOOL]      "Calculate 'g' in the Nlpsol base class"
> "calc_lam_p"          [OT_BOOL]      "Calculate 'lam_p' in the Nlpsol base class"
> "calc_lam_x"          [OT_BOOL]      "Calculate 'lam_x' in the Nlpsol base class"
> "calc_multipliers"          [OT_BOOL]      "Calculate Lagrange multipliers in the Nlpsol base class"
> "discrete"          [OT_BOOLVECTOR]      "Indicates which of the variables are discrete, i.e. integer-valued"
> "error_on_fail"          [OT_BOOL]      "When the numerical process returns unsuccessfully, raise an error (default false)."
> "eval_errors_fatal"          [OT_BOOL]      "When errors occur during evaluation of f,g,...,stop the iterations"
> "ignore_check_vec"          [OT_BOOL]      "If set to true, the input shape of F will not be checked."
> "iteration_callback"          [OT_FUNCTION]      "A function that will be called at each iteration with the solver as input. Check documentation of Callback."
> "iteration_callback_ignore_errors"          [OT_BOOL]      "If set to true, errors thrown by iteration_callback will be ignored."
> "iteration_callback_step"          [OT_INT]      "Only call the callback function every few iterations."
> "min_lam"          [OT_DOUBLE]      "Minimum allowed multiplier value"
> "no_nlp_grad"          [OT_BOOL]      "Prevent the creation of the 'nlp_grad' function"
> "oracle_options"          [OT_DICT]      "Options to be passed to the oracle function"
> "sens_linsol"          [OT_STRING]      "Linear solver used for parametric sensitivities (default 'qr')."
> "sens_linsol_options"          [OT_DICT]      "Linear solver options used for parametric sensitivities."
> "verbose_init"          [OT_BOOL]      "Print out timing information about the different stages of initialization"
> "warn_initial_bounds"          [OT_BOOL]      "Warn if the initial guess does not satisfy LBX and UBX"
> "beta"          [OT_DOUBLE]      "Line-search parameter, restoration factor of stepsize"
> "c1"          [OT_DOUBLE]      "Armijo condition, coefficient of decrease in merit"
> "convexify_margin"          [OT_DOUBLE]      "When using a convexification strategy, make sure that the smallest eigenvalue is at least this (default: 1e-7)."
> "convexify_strategy"          [OT_STRING]      "NONE|regularize|eigen-reflect|eigen-clip. Strategy to convexify the Lagrange Hessian before passing it to the solver."
> "hess_lag"          [OT_FUNCTION]      "Function for calculating the Hessian of the Lagrangian (autogenerated by default)"
> "hessian_approximation"          [OT_STRING]      "limited-memory|exact"
> "jac_fg"          [OT_FUNCTION]      "Function for calculating the gradient of the objective and Jacobian of the constraints (autogenerated by default)"
> "lbfgs_memory"          [OT_INT]      "Size of L-BFGS memory."
> "max_iter"          [OT_INT]      "Maximum number of SQP iterations"
> "max_iter_eig"          [OT_DOUBLE]      "Maximum number of iterations to compute an eigenvalue decomposition (default: 50)."
> "max_iter_ls"          [OT_INT]      "Maximum number of linesearch iterations"
> "merit_memory"          [OT_INT]      "Size of memory to store history of merit function values"
> "min_iter"          [OT_INT]      "Minimum number of SQP iterations"
> "min_step_size"          [OT_DOUBLE]      "The size (inf-norm) of the step size should not become smaller than this."
> "print_header"          [OT_BOOL]      "Print the header with problem statistics"
> "print_iteration"          [OT_BOOL]      "Print the iterations"
> "print_status"          [OT_BOOL]      "Print a status message after solving"
> "qpsol"          [OT_STRING]      "The QP solver to be used by the SQP method [qpoases]"
> "qpsol_options"          [OT_DICT]      "Options to be passed to the QP solver"
> "tol_du"          [OT_DOUBLE]      "Stopping criterion for dual infeasability"
> "tol_pr"          [OT_DOUBLE]      "Stopping criterion for primal infeasibility"
