# Jcon at g=412, x=111
g=388 is speed_next==speed
x=111 is density



# MX variables and parameters
[opti_x_1, opti_x_3, opti_x_4, opti_x_2] = [w, rho, v, r]
[opti_p_1, opti_p_5, opti_p_6, opti_p_7] = [d, a, v_free, rho_crit]


# Original jacobian
@1=0.555556, 
@2=(-1/p_134), 									% p_134=a, p_135=v_free, p_136=rho_crit
@3=(x_110/p_136), 								% x_110=rho1(7), x_111=rho2(7), x_239=v1(7)
@4=exp((@2 * pow(@3,p_134))), 
@5=(x_110+40), 
@6=((33.3333*(x_111-x_110))/@5), 

(-((!(((x_239+(@1*((p_135*@4)-x_239)))-@6)<=0))*((@1*(p_135*(@4*(@2*((p_134*pow(@3,(p_134-1)))/p_136)))))-((-33.3333/@5)-(@6/@5)))))




# Symbolic substitutions by hand
@2 = -1/a
@3 = rho1(7) / rho_crit							% AHAHHHHHHH: negative rho1(7) when raised to the power gives NaN
@4 = exp(-1/a * (rho1(7) / rho_crit)^a)				
@5 = rho1(7) + kappa
@6 = 33.3333 * (rho2(7) - rho1(7)) / (rho1(7) + kappa)
-(
	(
		!(((v1(7) + (@1 * ((v_free * @4) - v1(7)))) - @6) <= 0)
	)
	
	*
	
	(
		(
			0.555556 * v_free * @4 * @2 * a * @3^(a - 1) / p_136
		) 
		+
		(
			33.3333 / @5 + @6 / @5
		)
	)
)
